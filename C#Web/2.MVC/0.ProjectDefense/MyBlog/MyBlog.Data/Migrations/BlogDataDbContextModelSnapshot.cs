// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data;

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(BlogDataDbContext))]
    partial class BlogDataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyBlog.Models.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("Title");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MyBlog.Models.Articles.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("CategoryName");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("MyBlog.Models.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("BookAuthorId");

                    b.Property<int>("BookCategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("Title");

                    b.HasIndex("BookAuthorId");

                    b.HasIndex("BookCategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MyBlog.Models.Books.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("BookAuthorGenreId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("FullName");

                    b.HasIndex("BookAuthorGenreId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("MyBlog.Models.Books.BookAuthorGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorGenreName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("AuthorGenreName");

                    b.ToTable("BookAuthorGenres");
                });

            modelBuilder.Entity("MyBlog.Models.Books.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookCategoryName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("BookCategoryName");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("MyBlog.Models.Brands.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<string>("BrandDescription")
                        .IsRequired();

                    b.Property<string>("BrandImageURL")
                        .IsRequired();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("BrandTypeId");

                    b.HasKey("Id");

                    b.HasAlternateKey("BrandName");

                    b.HasIndex("BrandTypeId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MyBlog.Models.Brands.BrandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("TypeName");

                    b.ToTable("BrandTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Fun.Joke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Jokes");
                });

            modelBuilder.Entity("MyBlog.Models.Fun.Meme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Memes");
                });

            modelBuilder.Entity("MyBlog.Models.Games.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("BrandId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("GameTypeId");

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("GameName");

                    b.HasIndex("BrandId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("MyBlog.Models.Games.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameTypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("GameTypeName");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Artists.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("ArtistTypeId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("FullName");

                    b.HasIndex("ArtistTypeId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Artists.ArtistType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistTypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("ArtistTypeName");

                    b.ToTable("ArtistTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Instruments.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("BrandId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<int>("InstrumentTypeId");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("ModelName");

                    b.HasIndex("BrandId");

                    b.HasIndex("InstrumentTypeId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Instruments.InstrumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("TypeName");

                    b.ToTable("InstrumentTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Songs.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("ArtistId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<int>("SongGenreId");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("SongName");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongGenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MyBlog.Models.Music.Songs.SongGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("GenreName");

                    b.ToTable("SongGenres");
                });

            modelBuilder.Entity("MyBlog.Models.ProductsForSale.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<int>("BrandId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasAlternateKey("ProductName");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyBlog.Models.ProductsForSale.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("TypeName");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfoURL")
                        .IsRequired();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("HighLightVideoURL")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired();

                    b.Property<int>("ReviewTypeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("Title");

                    b.HasIndex("ReviewTypeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MyBlog.Models.Reviews.ReviewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReviewTypeName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasAlternateKey("ReviewTypeName");

                    b.ToTable("ReviewTypes");
                });

            modelBuilder.Entity("MyBlog.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserArticles", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserArticles");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserArtists", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("ArtistId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserArtists");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserBooks", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserBooks");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserBrands", b =>
                {
                    b.Property<int>("BrandId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("BrandId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserBrands");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserGames", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserGames");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserInstruments", b =>
                {
                    b.Property<int>("InstrumentId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("InstrumentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserInstruments");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserJokes", b =>
                {
                    b.Property<int>("JokeId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("JokeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserJokes");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserMemes", b =>
                {
                    b.Property<int>("MemeId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("MemeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserMemes");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserProducts", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("BoughtOn");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBoughtProducts");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserReviews", b =>
                {
                    b.Property<int>("ReviewId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("ReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserReviews");
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserSongs", b =>
                {
                    b.Property<int>("SongId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("AddedToFavouritesOn");

                    b.HasKey("SongId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteUserSongs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyBlog.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyBlog.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyBlog.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Articles.Article", b =>
                {
                    b.HasOne("MyBlog.Models.Articles.ArticleCategory", "ArticleCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Books.Book", b =>
                {
                    b.HasOne("MyBlog.Models.Books.BookAuthor", "BookAuthor")
                        .WithMany("Books")
                        .HasForeignKey("BookAuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Books.BookCategory", "BookCategory")
                        .WithMany("Books")
                        .HasForeignKey("BookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Books.BookAuthor", b =>
                {
                    b.HasOne("MyBlog.Models.Books.BookAuthorGenre", "BookAuthorGenre")
                        .WithMany("Authors")
                        .HasForeignKey("BookAuthorGenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Brands.Brand", b =>
                {
                    b.HasOne("MyBlog.Models.Brands.BrandType", "BrandType")
                        .WithMany("Brands")
                        .HasForeignKey("BrandTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Games.Game", b =>
                {
                    b.HasOne("MyBlog.Models.Brands.Brand", "Brand")
                        .WithMany("Games")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Games.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Music.Artists.Artist", b =>
                {
                    b.HasOne("MyBlog.Models.Music.Artists.ArtistType", "ArtistType")
                        .WithMany("Artists")
                        .HasForeignKey("ArtistTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Music.Instruments.Instrument", b =>
                {
                    b.HasOne("MyBlog.Models.Brands.Brand", "Brand")
                        .WithMany("Instruments")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Music.Instruments.InstrumentType", "InstrumentType")
                        .WithMany("Instruments")
                        .HasForeignKey("InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Music.Songs.Song", b =>
                {
                    b.HasOne("MyBlog.Models.Music.Artists.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Music.Songs.SongGenre", "SongGenre")
                        .WithMany("Songs")
                        .HasForeignKey("SongGenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.ProductsForSale.Product", b =>
                {
                    b.HasOne("MyBlog.Models.Brands.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.ProductsForSale.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Reviews.Review", b =>
                {
                    b.HasOne("MyBlog.Models.Reviews.ReviewType", "ReviewType")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserArticles", b =>
                {
                    b.HasOne("MyBlog.Models.Articles.Article", "Article")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserArtists", b =>
                {
                    b.HasOne("MyBlog.Models.Music.Artists.Artist", "Artist")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserBooks", b =>
                {
                    b.HasOne("MyBlog.Models.Books.Book", "Book")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserBrands", b =>
                {
                    b.HasOne("MyBlog.Models.Brands.Brand", "Brand")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteBrands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserGames", b =>
                {
                    b.HasOne("MyBlog.Models.Games.Game", "Game")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserInstruments", b =>
                {
                    b.HasOne("MyBlog.Models.Music.Instruments.Instrument", "Instrument")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteInstruments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserJokes", b =>
                {
                    b.HasOne("MyBlog.Models.Fun.Joke", "Joke")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteJokes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserMemes", b =>
                {
                    b.HasOne("MyBlog.Models.Fun.Meme", "Meme")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("MemeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteMemes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserProducts", b =>
                {
                    b.HasOne("MyBlog.Models.ProductsForSale.Product", "Product")
                        .WithMany("BoughtBy")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("BoughtProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserReviews", b =>
                {
                    b.HasOne("MyBlog.Models.Reviews.Review", "Review")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBlog.Models.Users.UserSongs", b =>
                {
                    b.HasOne("MyBlog.Models.Music.Songs.Song", "Song")
                        .WithMany("AddedToFavoritesBy")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBlog.Models.Users.User", "User")
                        .WithMany("FavouriteSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
